const TOKEN = "YOUR_TELEGRAM_BOT_TOKEN";
const API_URL = `https://api.telegram.org/bot${TOKEN}`;
const SHEET_ID = "YOUR_SHEET_ID";

function doPost(e) {
  const { message } = JSON.parse(e.postData.contents);
  const chatId = message.chat.id;
  const text = message.text;

  if (text.startsWith("/start") || text.startsWith("/help")) {
    sendMessage(
      chatId,
      `Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n!\n\nH∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n\n1. Th√™m giao d·ªãch:\n   Nh·∫≠p theo c√∫ ph√°p: <+/-s·ªë ti·ªÅn> <m√¥ t·∫£>.\n\n2. Xem b√°o c√°o:\n   - /report or /r: B√°o c√°o t·ªïng.\n   - /report mm/yyyy: B√°o c√°o th√°ng.\n   - /report dd/mm/yyyy: B√°o c√°o tu·∫ßn (hi·ªÉn th·ªã tu·∫ßn c√≥ ng√†y ƒë∆∞·ª£c ch·ªçn).\n   - Th√™m "az" ho·∫∑c "za" sau l·ªánh ƒë·ªÉ s·∫Øp x·∫øp:\n     V√≠ d·ª•: /report az ho·∫∑c /report mm/yyyy za.\n\n3. H·ªßy giao d·ªãch g·∫ßn nh·∫•t:\n   - /undo or /u: X√≥a giao d·ªãch g·∫ßn nh·∫•t.\n\n4. X√≥a to√†n b·ªô d·ªØ li·ªáu:\n   - /reset or /x: X√≥a t·∫•t c·∫£ d·ªØ li·ªáu tr√™n b·∫£ng t√≠nh.\n`
    );
  } else if (text.startsWith("/r") || text.startsWith("/report")) {
    handleReport(chatId, text);
  } else if (text.startsWith("/x") || text.startsWith("/reset")) {
    resetSheet(chatId);
  } else if (text.startsWith("/u") || text.startsWith("/undo")) {
    undoLast(chatId);
  } else {
    handleTransaction(chatId, text);
  }
}

function handleTransaction(chatId, text) {
  const [rawAmount, ...desc] = text.split(" ");
  const type = rawAmount.startsWith("+")
    ? "thu"
    : rawAmount.startsWith("-")
    ? "chi"
    : null;
  const amount = type ? rawAmount.slice(1) : rawAmount;

  if (!type || !isValidAmount(amount)) {
    sendMessage(
      chatId,
      "L·ªói: Nh·∫≠p ƒë√∫ng c√∫ ph√°p <+/-s·ªë ti·ªÅn> <m√¥ t·∫£>. V√≠ d·ª•: '+500k L∆∞∆°ng' ho·∫∑c '-200k Mua s·∫Øm'."
    );
    return;
  }

  const parsedAmount = parseAmount(amount);
  if (parsedAmount <= 0) {
    sendMessage(chatId, "L·ªói: S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.");
    return;
  }

  const description = desc.join(" ").trim() || "Kh√¥ng c√≥ m√¥ t·∫£";
  const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

  sheet.appendRow([new Date(), type, parsedAmount, description]);

  sendMessage(
    chatId,
    `‚úÖ ƒê√£ th√™m giao d·ªãch:\nüí∞ S·ªë ti·ªÅn: ${formatCurrency(
      parsedAmount
    )}\nüìÇ Lo·∫°i: ${
      type === "thu" ? "Thu nh·∫≠p" : "Chi ti√™u"
    }\nüìù M√¥ t·∫£: ${description}`
  );
}

function handleReport(chatId, text) {
  const dateRegex = /\d{2}\/\d{4}|\d{2}\/\d{2}\/\d{4}/;
  const dateParam = text.match(dateRegex)?.[0];
  let filter = "all";
  let sortOrder = null;

  if (text.includes("az")) {
    sortOrder = "az";
  } else if (text.includes("za")) {
    sortOrder = "za";
  }

  if (dateParam) {
    filter = dateParam.length === 7 ? "month" : "week";
  }

  generateReport(chatId, filter, dateParam, sortOrder);
}

function generateReport(chatId, filter, dateParam, sortOrder) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

  if (sheet.getLastRow() <= 1) {
    sendMessage(chatId, "Hi·ªán kh√¥ng c√≥ giao d·ªãch n√†o trong b·∫£ng t√≠nh.");
    return;
  }

  const data = sheet.getDataRange().getValues().slice(1);

  if (!data.length) {
    sendMessage(chatId, "Kh√¥ng c√≥ d·ªØ li·ªáu.");
    return;
  }

  const now = parseDate(filter, dateParam);
  const filteredData = data.filter(([date]) =>
    isValidDate(new Date(date), filter, now)
  );

  if (sortOrder) {
    filteredData.sort((a, b) => {
      const amountA = a[2];
      const amountB = b[2];
      return sortOrder === "az" ? amountA - amountB : amountB - amountA;
    });
  }

  const incomeTransactions = [];
  const expenseTransactions = [];
  let [income, expense] = [0, 0];

  filteredData.forEach(([date, type, amount, desc]) => {
    const formattedReportDate = new Date(date).toLocaleString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour12: false,
    });

    const transaction = `${formatCurrency(amount)}: ${
      desc || "Kh√¥ng c√≥ m√¥ t·∫£"
    } (${formattedReportDate})`;

    if (type === "thu") {
      income += amount;
      incomeTransactions.push(`${transaction}`);
    } else if (type === "chi") {
      expense += amount;
      expenseTransactions.push(`${transaction}`);
    }
  });

  if (!filteredData.length) {
    const range = filter === "week" ? "tu·∫ßn" : "th√°ng";
    sendMessage(chatId, `Kh√¥ng c√≥ giao d·ªãch cho ${range} ƒë∆∞·ª£c y√™u c·∫ßu.`);
    return;
  }

  const weekInfo =
    filter === "week"
      ? ` (tu·∫ßn t·ª´ ${now.startOfWeek.toLocaleDateString(
          "vi-VN"
        )} ƒë·∫øn ${now.endOfWeek.toLocaleDateString("vi-VN")})`
      : "";

  const report = [
    `üìä B√°o c√°o (${filter === "all" ? "T·ªïng" : filter}${weekInfo}):`,
    `- T·ªïng thu: ${formatCurrency(income)}`,
    `- T·ªïng chi: ${formatCurrency(expense)}`,
    `- C√¢n ƒë·ªëi: ${formatCurrency(income - expense)}`,
    "",
    "üí∞ Giao d·ªãch thu nh·∫≠p c·ª• th·ªÉ:",
    incomeTransactions.length
      ? incomeTransactions.map((tx, index) => `${index + 1}. ${tx}`).join("\n")
      : "Kh√¥ng c√≥ giao d·ªãch thu nh·∫≠p.",
    "",
    "üí∏ Giao d·ªãch chi ti√™u c·ª• th·ªÉ:",
    expenseTransactions.length
      ? expenseTransactions.map((tx, index) => `${index + 1}. ${tx}`).join("\n")
      : "Kh√¥ng c√≥ giao d·ªãch chi ti√™u.",
  ].join("\n");

  sendMessage(chatId, report);
}

const escapeMarkdown = (text) => {
  return text
    .replace(/(\*|_|`|\[|\])/g, "\\$1") // Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
    .replace(/-/g, "\\-") // Escape d·∫•u g·∫°ch ngang
    .replace(/\./g, "\\."); // Escape d·∫•u ch·∫•m
};

function resetSheet(chatId) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

  if (sheet.getLastRow() <= 1) {
    sendMessage(chatId, "Hi·ªán kh√¥ng c√≥ giao d·ªãch n√†o trong b·∫£ng t√≠nh.");
    return;
  }

  sheet.clear();
  sheet.appendRow(["Th·ªùi gian", "Lo·∫°i", "S·ªë ti·ªÅn", "M√¥ t·∫£"]);
  sendMessage(chatId, "ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu.");
}

function undoLast(chatId) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();
  const lastRow = sheet.getLastRow();
  if (lastRow > 1) {
    sheet.deleteRow(lastRow);
    sendMessage(chatId, "ƒê√£ x√≥a giao d·ªãch g·∫ßn nh·∫•t.");
  } else {
    sendMessage(chatId, "Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ x√≥a.");
  }
}

function isValidDate(date, filter, now) {
  if (filter === "month") {
    return (
      date.getMonth() === now.getMonth() &&
      date.getFullYear() === now.getFullYear()
    );
  }
  if (filter === "week") {
    const { startOfWeek, endOfWeek } = now;
    return date >= startOfWeek && date <= endOfWeek;
  }
  return true;
}

function parseDate(filter, dateParam) {
  if (!dateParam) return new Date();
  const parts = dateParam.split("/");
  if (filter === "month" && parts.length === 2) {
    return new Date(parts[1], parts[0] - 1);
  }
  if (filter === "week" && parts.length === 3) {
    const date = new Date(parts[2], parts[1] - 1, parts[0]);
    const dayOfWeek = date.getDay() || 7;
    date.startOfWeek = new Date(date);
    date.startOfWeek.setDate(date.getDate() - dayOfWeek + 1);
    date.endOfWeek = new Date(date.startOfWeek);
    date.endOfWeek.setDate(date.startOfWeek.getDate() + 6);
    return date;
  }
  return new Date();
}

function isValidAmount(amount) {
  const normalizedAmount = amount.replace("tr", "").replace("k", "");
  return !isNaN(normalizedAmount) && parseFloat(normalizedAmount) > 0;
}

function parseAmount(amount) {
  let numericValue = parseFloat(amount);
  if (amount.includes("tr")) {
    numericValue *= Math.pow(10, 6);
  } else if (amount.includes("k")) {
    numericValue *= Math.pow(10, 3);
  }
  return numericValue || 0;
}

function formatCurrency(amount) {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
  }).format(amount);
}

function sendMessage(chatId, text) {
  try {
    const response = UrlFetchApp.fetch(`${API_URL}/sendMessage`, {
      method: "post",
      contentType: "application/json",
      payload: JSON.stringify({ chat_id: chatId, text }),
    });

    const jsonResponse = JSON.parse(response.getContentText());
    if (!jsonResponse.ok) {
      Logger.log(`L·ªói g·ª≠i tin nh·∫Øn: ${jsonResponse.description}`);
    }
  } catch (error) {
    Logger.log(`L·ªói k·∫øt n·ªëi ƒë·∫øn Telegram: ${error.message}`);
  }
}
